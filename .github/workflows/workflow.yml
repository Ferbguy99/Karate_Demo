name: Workflow

on:
  push:
  pull_request:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: slack - GitHub Actions Slack integration
        # You may pin to the exact commit or the version.
        # uses: act10ns/slack@44541246747a30eb3102d87f7a4cc5471b0ffb7d
        uses: act10ns/slack@v2.1.0
        with:
          # Specify Slack Incoming Webhook URL
          webhook-url: https://hooks.slack.com/services/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 # optional
          # Configuration file
          # config: # optional, default is .github/slack.yml
          # Specify success, failure, cancelled or a custom status
          # status: 
          # Report on the status of individual steps
          # steps: # optional
          # matrix properties
          # matrix: # optional
          # Override default channel with different channel or username
          channel: testing # optional
          # Override message format for step
          message: testing # optional
          
      # - name: Checkout
      #   uses: actions/checkout@v2

      # - name: Google Auth
      #   id: auth
      #   uses: 'google-github-actions/auth@v0'
      #   with:
      #     token_format: 'access_token'
      #     workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
      #     service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      # # NOTE: Alternative option - authentication via credentials json
      # # - name: Google Auth
      # #   id: auth
      # #   uses: 'google-github-actions/auth@v0'
      # #   with:
      # #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}''

      # # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

      # # Authenticate Docker to Google Cloud Artifact Registry
      # - name: Docker Auth
      #   id: docker-auth
      #   uses: 'docker/login-action@v1'
      #   with:
      #     username: 'oauth2accesstoken'
      #     password: '${{ steps.auth.outputs.access_token }}'
      #     registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      # - name: Build and Push Container
      #   run: |-
      #     docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}" ./
      #     docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}"

      # # END - Docker auth and build

      # - name: Deploy to Cloud Run
      #   id: deploy
      #   uses: google-github-actions/deploy-cloudrun@v0
      #   with:
      #     service: ${{ env.SERVICE }}
      #     region: ${{ env.REGION }}
      #     # NOTE: If using a pre-built image, update the image name here
      #     image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}

      # # If required, use the Cloud Run url output in later steps
      # - name: Show Output
      #   run: echo ${{ steps.deploy.outputs.url }}
